on:
  workflow_dispatch:
  push:
    branches:
        - master
env:
  NODE_VERSION: '21.x'
  FOLDER: /home/brightky/applications/e-commerce/server
  IMAGE: server
  IMAGE_VERSION: latest
permissions:
  contents: read

jobs:
  create-folder:
    name: Create folder
    runs-on: ubuntu-latest
    steps:
      - name: Create folder
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_APPLICATIONS_HOST }}
          port: 22
          username: ${{ secrets.PROD_APPLICATIONS_USERNAME }}
          key: ${{ secrets.PROD_APPLICATIONS_SSH_PRIVATE_KEY }}
          script: |
            rm -rf ${{ env.FOLDER }}
            mkdir -p  ${{ env.FOLDER }}

  copy-configs:
    name: 'copy configs'
    runs-on: ubuntu-latest
    needs: create-folder
    steps:
      - uses: actions/checkout@master
      - name: copy file via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PROD_APPLICATIONS_HOST }}
          port: 22
          username: ${{ secrets.PROD_APPLICATIONS_USERNAME }}
          key: ${{ secrets.PROD_APPLICATIONS_SSH_PRIVATE_KEY }}
          source: 'compose.yaml'
          target: ${{ env.FOLDER }}

  dockerize:
    runs-on: ubuntu-latest
    steps:
      - name: Create folder
        run: mkdir -p /tmp
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and export
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: ${{env.IMAGE}}:${{env.IMAGE_VERSION}}
          outputs: type=docker,dest=/tmp/${{env.IMAGE}}.tar
      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.IMAGE}}
          path: /tmp/${{env.IMAGE}}.tar

  copy-image:
    name: 'copy image'
    runs-on: ubuntu-latest
    needs: dockerize
    steps:
      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{env.IMAGE}}
          path: .
      - name: copy file via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PROD_APPLICATIONS_HOST }}
          port: 22
          username: ${{ secrets.PROD_APPLICATIONS_USERNAME }}
          key: ${{ secrets.PROD_APPLICATIONS_SSH_PRIVATE_KEY }}
          source: '${{env.IMAGE}}.tar'
          target: '/tmp/'

  load-image:
    name: Load image
    runs-on: ubuntu-latest
    needs: copy-image
    steps:
      - name: Load image
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_APPLICATIONS_HOST }}
          port: 22
          username: ${{ secrets.PROD_APPLICATIONS_USERNAME }}
          key: ${{ secrets.PROD_APPLICATIONS_SSH_PRIVATE_KEY }}
          script: |
            docker load -i /tmp/${{env.IMAGE}}.tar

  run-container:
    name: 'Run container'
    runs-on: ubuntu-latest
    needs:
      - load-image
      - copy-configs
    steps:
      - name: Run container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_APPLICATIONS_HOST }}
          port: 22
          username: ${{ secrets.PROD_APPLICATIONS_USERNAME }}
          key: ${{ secrets.PROD_APPLICATIONS_SSH_PRIVATE_KEY }}
          script: |
            docker compose -f ${{ env.FOLDER }}/compose.yaml stop
            docker compose -f ${{ env.FOLDER }}/compose.yaml rm -f

            echo DB_URI=mongodb://mongo_server:27017/ecommerce >> ${{ env.FOLDER }}/.env
            echo PRIVATE_KEY=super_private_key# >> ${{ env.FOLDER }}/.env
            echo PORT=9000 >> ${{ env.FOLDER }}/.env
            echo API_URI=http://localhost:9000 >> ${{ env.FOLDER }}/.env
            echo DB_USER=root >> ${{ env.FOLDER }}/.env
            echo DB_PASSWORD=brightkyefoo >> ${{ env.FOLDER }}/.env
            
            docker compose -f ${{ env.FOLDER }}/compose.yaml up -d

            rm -f ${{ env.FOLDER }}/.env
